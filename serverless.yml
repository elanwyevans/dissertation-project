org: elanwy
app: aws-node-http-api-application
service: aws-node-http-api-project
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
        - Effect: 'Allow'
          Action:
            - s3:*
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "rekognition:*"
          Resource: "*"
functions:
  createCustomer:
    handler: createCustomer.createCustomer
    events:
      - httpApi:
          path: /
          method: post
  getCustomers:
    handler: getCustomers.getCustomers
    events:
      - httpApi:
          path: /customers
          method: get
  imageAnalysis:
    handler: imageAnalysis.imageAnalysis
    events:
      - http:
          path: analysis
          method: post
  uploadFile:
    handler: uploadFile.uploadFile
    events:
      - http:
          method: post
          path: upload
          cors: true

resources:
  Resources:
    MyServerlessExampleBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverlessexampledewi

    # define a policy for an existing role
#    UploadFilePolicy:
#      Type: AWS::IAM::Policy
#      Properties:
#        PolicyName: UploadObjects
#        PolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Sid: LambdaPutObjects
#              Effect: Allow
#              Action:
#                - s3:PutObject
#                - s3:PutObjectTagging
#              Resource:
#                Fn::Join:
#                  - ""
#                  - - "arn:aws:s3:::"
#                    - Ref: MyServerlessExampleBucket
#                    - "/*"
#        Roles:
#          - serverless-example-dev-us-east-1-lambdaRole
    #    DewiBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: dewibucket
#    DewiBucketAllowPublicReadPolicy:
#      Type: AWS::S3::BucketPolicy
#      Properties:
#        Bucket: !Ref DewiBucket
#        PolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: Allow
#              Action:
#                - "s3:GetObject"
#              Resource:
#                - !Sub "${DewiBucket.Arn}/*"
#              Principal: "*"


    CustomerTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: primary_key
              AttributeType: S
          BillingMode: PAY_PER_REQUEST
          KeySchema:
            - AttributeName: primary_key
              KeyType: HASH
          TableName: ${self:service}-customerTable-${sls:stage}